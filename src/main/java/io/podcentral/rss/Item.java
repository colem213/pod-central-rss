package io.podcentral.rss;

import java.time.Instant;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;

import org.eclipse.persistence.oxm.annotations.XmlPath;

import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBIgnore;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBIndexHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBIndexRangeKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTypeConverted;

import io.podcentral.aws.InstantConverter;
import io.podcentral.config.TableConstants;
import io.podcentral.xml.CsvAdapter;
import io.podcentral.xml.ItunesDurationAdapter;
import io.podcentral.xml.ItunesExplicitAdapter;
import lombok.Data;
import lombok.NoArgsConstructor;

@NoArgsConstructor
@DynamoDBTable(tableName = TableConstants.Entry.TABLE_NAME)
@Data
public class Item {
  @DynamoDBHashKey
  @DynamoDBAutoGeneratedKey
  private String id;
  @DynamoDBIndexHashKey(globalSecondaryIndexName = TableConstants.Entry.GSI_FEED_INDEX)
  private String feedId;
  private String title;
  private String link;
  @DynamoDBIgnore
  private String rssDescription;
  @DynamoDBIgnore
  @XmlElement(name = "author")
  private String rssAuthor;
  private String category;
  private String comments;
  @DynamoDBIgnore
  private MediaContent enclosure;
  private String guid;
  @XmlPath("source/@url/text()")
  private String sourceUrl;
  @DynamoDBTypeConverted(converter = InstantConverter.class)
  @DynamoDBIndexRangeKey(globalSecondaryIndexName = TableConstants.Entry.GSI_FEED_INDEX)
  private Instant pubDate;

  @DynamoDBIgnore
  @XmlPath("itunes:author/text()")
  private String itunesAuthor;
  @DynamoDBAttribute(attributeName = "block")
  @XmlPath("itunes:block/text()")
  private Boolean itunesBlock;
  @DynamoDBAttribute(attributeName = "imageUrl")
  @XmlPath("itunes:image/@href")
  private String itunesImageUrl;
  @DynamoDBAttribute(attributeName = "duration")
  @XmlJavaTypeAdapter(ItunesDurationAdapter.class)
  @XmlPath("itunes:duration/text()")
  private String itunesDuration;
  @DynamoDBAttribute(attributeName = "explicit")
  @XmlJavaTypeAdapter(ItunesExplicitAdapter.class)
  @XmlElement(name = "explicit", namespace = XmlNs.ITUNES)
  private Boolean itunesExplicit;
  @DynamoDBAttribute(attributeName = "closedCaptioned")
  @XmlElement(name = "isClosedCaptioned", namespace = XmlNs.ITUNES)
  private Boolean itunesIsClosedCaptioned;
  @DynamoDBAttribute(attributeName = "order")
  @XmlElement(name = "order", namespace = XmlNs.ITUNES)
  private Integer itunesOrder;
  @DynamoDBAttribute(attributeName = "subtitle")
  @XmlElement(name = "subtitle", namespace = XmlNs.ITUNES)
  private String itunesSubtitle;
  @DynamoDBIgnore
  @XmlElement(name = "summary", namespace = XmlNs.ITUNES)
  private String itunesSummary;
  @DynamoDBIgnore
  @XmlElement(name = "content", namespace = XmlNs.MEDIA)
  private List<MediaContent> content = new ArrayList<>();
  @XmlJavaTypeAdapter(CsvAdapter.class)
  @XmlElement(namespace = XmlNs.MEDIA)
  private List<String> keywords;

  @DynamoDBAttribute(attributeName = "description")
  public String getDescription() {
    return itunesSummary != null ? itunesSummary : rssDescription;
  }

  @DynamoDBAttribute(attributeName = "author")
  public String getAuthor() {
    return itunesAuthor != null ? itunesAuthor : rssAuthor;
  }

  @DynamoDBAttribute(attributeName = "media")
  public List<MediaContent> getMedia() {
    if (getContent().isEmpty()) {
      return enclosure == null ? null : Arrays.asList(enclosure);
    } else {
      return getContent();
    }
  }
}
